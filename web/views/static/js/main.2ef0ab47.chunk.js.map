{"version":3,"sources":["store/actionCreators.js","store/actionTypes.js","Json2Go.js","store/reducer.js","store/index.js","index.js"],"names":["getRotateCount","dispatch","axios","get","then","res","data","type","value","catch","err","Json2Go","props","this","contactValue","contactChangeHandle","inputValue","inputChangeHandle","radioChangeHandle","radioValue","convertHandle","rotateCount","outputValue","outputFoucus","className","id","src","Group","onChange","onFocus","onClick","ref","href","Component","connect","state","e","target","checked","url","method","input_val","cate","contact","headers","actionCreators","error","document","getElementById","select","defaultState","outputRefState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","newState","JSON","parse","stringify","applyMiddleware","thunk","config","top","duration","maxCount","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.2ef0ab47.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nclass actionCreators {}\n\nexport const inputChange = (value) => ({\n  type:actionTypes.INPUT_CHANGE,\n  value\n})\nexport const radioChange = (value) => ({\n  type:actionTypes.RADIO_CHANGE,\n  value\n})\n\nexport const contactChange = (value) => ({\n  type:actionTypes.CONTACT_CHANGE,\n  value\n})\n\nexport const outputValue = (value) => ({\n  type:actionTypes.OUTPUT_VALUE,\n  value\n})\n\nexport const rotateCount =(value) =>({\n  type:actionTypes.ROTATE_COUNT_CHANGE,\n  value\n})\n\n\nexport const getRotateCount = ()=>{\n  return (dispatch) =>{\n    axios.get(\"/api/rotate/count\").then((res) => {\n      let data=res.data\n      dispatch(rotateCount(data.data));\n    }).catch((err) =>{\n    })\n  }\n}\n\nexport const getJsonInfo = (inputValue,radioValue,contactValue) => {\n  return (dispatch) =>{\n    axios({\n          url:'/api/rotate',\n          method: 'post',\n          data: {input_val:inputValue,cate:radioValue,contact:contactValue},\n          headers:{\n            'Content-Type':'application/x-www-form-urlencoded'\n          }\n    }).then((res) => {\n      let data=res.data\n      dispatch(outputValue(data.data));\n      dispatch(getRotateCount())\n    }).catch((err) =>{\n    })\n  }\n}\n\nexport default actionCreators;\n\n\n","export const INPUT_CHANGE = 'INPUT_CHANGE';\nexport const OUTPUT_VALUE = 'OUTPUT_VALUE';\nexport const RADIO_VALUE = 'RADIO_VALUE';\nexport const RADIO_CHANGE = 'RADIO_CHANGE';\nexport const CONTACT_VALUE = 'CONTACT_VALUE';\nexport const CONTACT_CHANGE = 'CONTACT_CHANGE';\nexport const ROTATE_COUNT_CHANGE ='ROTATE_COUNT_CHANGE';\n","import React, { Component } from 'react';\nimport  * as actionCreators  from './store/actionCreators.js';\nimport { connect } from 'react-redux';\nimport { Radio , Checkbox , message } from 'antd';\nimport './style.css';\n\nclass Json2Go extends Component {\n  constructor(props){\n      super(props)\n  }\n  render(){\n    const { contactValue,contactChangeHandle, inputValue,inputChangeHandle, radioChangeHandle, radioValue, convertHandle, rotateCount,outputValue,outputFoucus} = this.props;\n    return(\n      <div className=\"App\">\n          <header>\n            <div className=\"intro\">\n              <div className=\"title\">\n                <h1>Json-go-struct</h1>\n                <h2>Convert to Go struct</h2>\n              </div>\n              <div>\n                <p>该工具可立即将JSON/YAML转换为Go类型定义. 在左侧粘贴JSON/YAML结构,右侧将生成等效的Go类型,可以将其粘贴到程序中.</p>\n                <p>针对数组json串,该工具的不能生成非内联的json结构体</p>\n                <p>© 2019 xhaoxiong</p>\n              </div>\n              <div>\n                 <img id=\"brand\" src=\"https://mholt.github.io/json-to-go/resources/images/json-to-go.png\"/>\n              </div>\n            </div>\n          </header>\n          <div className=\"select\">\n            <Radio.Group onChange={radioChangeHandle} value={radioValue}>\n              <Radio value=\"JSON\">JSON</Radio>\n              <Radio value=\"YAML\">YAML</Radio>\n            </Radio.Group>\n            <Checkbox onChange={contactChangeHandle}>是否内联(勾选为是)</Checkbox>\n          </div>\n          <table>\n            <tbody>\n              <th className=\"json-word\">\n               {radioValue}\n              </th>\n              <th className=\"crow-word\">→</th>\n              <th className=\"go-word\">\n                Go\n              </th>\n            </tbody>\n          </table>\n          <table>\n            <tbody>\n              <tr>\n                <td className=\"textarea-contain\">\n                  <textarea id=\"input\" value={inputValue}  onChange={inputChangeHandle}>\n\n                  </textarea>\n                </td>\n                <td className=\"textarea-contain\">\n                  <textarea id=\"output\" onFocus={()=>{outputFoucus(outputValue)}} onClick={()=>{outputFoucus(outputValue)}} ref={(ref)=>outputFoucus(outputValue)} value={outputValue}>\n\n                  </textarea>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <button onClick={ () => convertHandle(inputValue,radioValue,contactValue)}>转!</button>\n          <div className=\"rotate-count\">成功转换了{rotateCount}次</div>\n          <footer>\n            © 2019 xhaoxiong<br/>这是通过<a href=\"https://github.com/ChimeraCoder/gojson\">gojson接入</a> 模仿<a href=\"https://mholt.github.io/json-to-go/\">该网站</a>用<a href=\"https://github.com/xhaoxiong/json2struct-react-demo\">react</a>与<a href=\"https://github.com/xhaoxiong/json2struct\">golang</a>接口实现了一遍.该项目非常适合新手入门react和golang的朋友学习.\n          </footer>\n      </div>\n      )}\n\n  componentDidMount(){\n    this.props.getRotateCount()\n  }}\n\nconst mapStateToProps = (state) => {\n  return {\n    inputValue:state.inputValue,\n    radioValue:state.radioValue,\n    contactValue:state.contactValue,\n    outputValue:state.outputValue,\n    rotateCount:state.rotateCount,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    inputChangeHandle(e){\n      dispatch(actionCreators.inputChange(e.target.value))\n    },\n    radioChangeHandle(e)  {\n      dispatch(actionCreators.radioChange(e.target.value))\n    },\n    contactChangeHandle(e){\n      dispatch(actionCreators.contactChange(e.target.checked))\n    },\n    convertHandle(inputValue,radioValue,contactValue) {\n      if(inputValue===''){\n        message.error('请输入需要转换的字符串');\n        return\n      }\n     dispatch(actionCreators.getJsonInfo(inputValue,radioValue,contactValue))\n    },\n    getRotateCount(){\n      dispatch(actionCreators.getRotateCount())\n    },\n    outputFoucus(outputValue){\n      if (outputValue!==\"\"){\n        document.getElementById('output').select()\n      }\n    }\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Json2Go);\n","import * as actionTypes from './actionTypes';\n\nconst defaultState={\n  inputValue:'',\n  outputValue:'',\n  radioValue:\"JSON\",\n  contactValue:true,\n  rotateCount:0,\n  outputRefState:false,\n};\n\nexport default (state = defaultState, action) => {\n  let newState=JSON.parse(JSON.stringify(state));\n  switch(action.type){\n    case actionTypes.INPUT_CHANGE:\n        newState.inputValue=action.value;\n      return newState;\n    case actionTypes.OUTPUT_VALUE:\n        newState.outputValue=action.value;\n      return newState;\n    case actionTypes.RADIO_CHANGE:\n        newState.radioValue=action.value;\n        return newState;\n    case actionTypes.CONTACT_CHANGE:\n        newState.contactValue=!action.value;\n        return newState;\n    case actionTypes.ROTATE_COUNT_CHANGE:\n        newState.rotateCount=action.value;\n        return newState;\n    default:\n      return state\n  }\n}\n","import { createStore , compose , applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer,\n  composeEnhancers(applyMiddleware(thunk)\n));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Json2Go from './Json2Go';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { message } from 'antd';\n\nmessage.config({\n  top: 100,\n  duration: 2,\n  maxCount: 3,\n});\nconst App = (\n  <Provider store={store}>\n    <Json2Go/>\n  </Provider>\n);\n\n\nReactDOM.render(App,document.getElementById('root'));\n"],"sourceRoot":""}